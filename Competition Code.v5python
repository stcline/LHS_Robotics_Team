{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\ncontroller=Controller()\n\nmotorRight = Motor(Ports.PORT11, GearSetting.RATIO_18_1, True)\nmotorLeft = Motor(Ports.PORT20, GearSetting.RATIO_18_1, False)\nmotor_arm = Motor(Ports.PORT12, GearSetting.RATIO_18_1, False)\nmotor_pusher = Motor(Ports.PORT2, GearSetting.RATIO_18_1, False)\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n# Make random actually random\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n    urandom.seed(int(random))\n      \n# Set random seed \ninitializeRandomSeed()\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:\n#\tAuthor:\n#\tCreated:\n#\tConfiguration:\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\n\ndef pre_autonomous():\n    # actions to do when the program starts\n    brain.screen.clear_screen()\n    brain.screen.print(\"pre auton code\")\n    wait(1, SECONDS)\n\ndef autonomous():\n    brain.screen.clear_screen()\n    brain.screen.print(\"autonomous code\")\n    # place automonous code here\n\ndef user_control():\n    brain.screen.clear_screen()\n    # place driver control in this while loop\n    # Code that runs the robot\n    while True:\n        # clear the screen\n        brain.screen.clear_screen()\n\n        # Get the value of the left joystick\n        drive = -controller.axis3.position()\n\n        # Get the value of the right joystick\n        turn = controller.axis1.position()\n\n        # Combine drive and turn for blended motion\n        left = drive + turn\n        right = drive - turn\n\n        # Set the left motor to the value of the left joystick\n        motorLeft.set_velocity(left, PERCENT)\n        motorLeft.spin(FORWARD)\n\n        # Set the right motor to the value of the right joystick\n        motorRight.set_velocity(right, PERCENT)\n        motorRight.spin(FORWARD)\n\n        # Print the values of the joysticks\n        brain.screen.print(\"Right motor: \" + str(right) + \" Left motor: \" + str(left))\n\n        # Arm control\n        if controller.buttonL1.pressing():\n            motor_arm.set_velocity(35, PERCENT)\n            motor_arm.spin(REVERSE)\n        elif controller.buttonL2.pressing():\n            motor_arm.set_velocity(35, PERCENT)\n            motor_arm.spin(FORWARD)\n        else:\n            motor_arm.stop()\n            motor_arm.set_stopping(HOLD)\n\n        # Pusher control\n        if controller.buttonR1.pressing():\n            motor_pusher.set_velocity(40, PERCENT)\n            motor_pusher.spin(REVERSE)\n        elif controller.buttonR2.pressing():\n            motor_pusher.set_velocity(40, PERCENT)\n            motor_pusher.spin(FORWARD)\n        else:\n            motor_pusher.set_velocity(0,PERCENT)\n\n        # Wait for 20 milliseconds\n        wait(20, MSEC)\n\n# create competition instance\ncomp = Competition(user_control, autonomous)\npre_autonomous()\n","textLanguage":"python","robotConfig":[],"slot":4,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.8","minVersion":"3.1.0","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}